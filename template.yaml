AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment of this stack of resources
  SNSTopicName:
    Type: String
    Description: Name of the sns topic
    Default: "fail-notifier"

Resources:
  SNSNotifier:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: !Sub ${SNSTopicName}-${Environment} 
      # Subscription: 
      #   - Subscription
      TopicName: !Sub ${SNSTopicName}-${AWS::AccountId}-${Environment} 

  SNSDefaultSubscription:
    Type: AWS::SNS::Subscription
    Properties: 
      Endpoint: vish847255@gmail.com
      Protocol: email
      TopicArn: !Ref SNSNotifier

  NotifierFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub error-notifier-${AWS::AccountId}-${Environment} 
      Timeout: 5
      Handler: handler.sendNotification
      Role: !GetAtt 
        - LambdaRole
        - Arn
      Environment:
        Variables:
          snsArn: !Ref SNSNotifier
      Runtime: nodejs12.x
      CodeUri: notification-service/

  LambdaPermissions:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref NotifierFunction
      Principal: logs.amazonaws.com

  LogTrigger:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn: >-
      LambdaPermissions
    Properties: 
      LogGroupName: /aws/lambda/post-authentication
      FilterPattern: '?ERROR'
      DestinationArn: !GetAtt 
        - NotifierFunction
        - Arn

  LambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Path: /
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/AdministratorAccess'